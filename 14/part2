#!/usr/bin/awk -f
function d2b(d, l, b) {
	while (d || l > 0) {
		b = d % 2 b
		d = int(d / 2)
		--l
	}
	return b
}
function b2d(b, x, d, i, a, m) {
	d = 0
	xi = 1
	for (i = 1; i <= mlen; ++i) {
		a = b[i]
		m = mask[i]
		if (m == 1) {
			a = 1
		} else if (m == "X") {
			a = substr(x, xi++, 1)
		}
		d = d * 2 + a
	}
	return d
}
/mask/ {
	mlen = split($3, mask, "")
	xlen = split($3, xxx, "X") - 1
	combinations = 2 ^ xlen
}
/mem/ {
	split($1, idx, "[")
	split(d2b(int(idx[2]), mlen), addr, "")
	for (x = 0; x < combinations; ++x) {
		mem[b2d(addr, d2b(x, xlen))] = $3
	}
}
END {
	for (i in mem) {
		sum += mem[i]
	}
	printf "%.0f\n", sum
}
